#!/usr/bin/env python3

import gettext
import gi
import os
import setproctitle
import subprocess
import sys
from subprocess import DEVNULL, PIPE, STDOUT

gi.require_version('Gdk', '3.0')
from gi.repository import Gdk

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

gi.require_version('Notify', '0.7')
from gi.repository import Notify

gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3

# i18n
gettext.install("mate-optimus", "/usr/share/locale")

def get_active_gpu():
    process = subprocess.Popen(['prime-select', 'query'], stdout=PIPE)
    out, err = process.communicate()
    return out.decode('utf-8')

def check_capability(capability):
    process = subprocess.Popen(['prime-select', '-h'], stdout=PIPE, stderr=PIPE)
    out, err = process.communicate()
    capabilities = err.decode('utf-8')
    if capability in capabilities:
        return True
    else:
        return False

def confirm_ignore(*args):
  return Gtk.ResponseType.CANCEL

def confirm_gpu_switch(gpu):
    message = ('Do you want to switch GPU now?') + ' ' + ('You need to log out and then log back in to switch the GPU to') + ' ' + gpu

    dialog = Gtk.MessageDialog(None, Gtk.DialogFlags.MODAL, Gtk.MessageType.INFO, Gtk.ButtonsType.NONE, message)
    dialog.set_deletable(False)
    dialog.connect("delete_event", confirm_ignore)
    dialog.add_button(_("Log Out"), Gtk.ResponseType.OK)
    dialog.add_button(Gtk.STOCK_CANCEL, Gtk.ResponseType.CANCEL)
    response = dialog.run()
    dialog.destroy()
    return response

def run_nvidia_settings(arg=None):
    subprocess.Popen(["nvidia-settings", "-page", "PRIME Profiles"])

def session_logout():
    current_desktop = os.environ.get("XDG_CURRENT_DESKTOP").lower()
    if 'mate' in current_desktop:
        subprocess.Popen(["mate-session-save", "--logout"])
    elif 'xfce' in current_desktop:
        subprocess.Popen(["xfce4-session-logout", "--logout"])
    elif 'x-cinnamon' in current_desktop:
        subprocess.Popen(["cinnamon-session-quit", "--logout", "--no-prompt"])
    elif 'budgie' in current_desktop:
        subprocess.Popen(["budgie-session", "--logout"])
    else:
        pass

def switch_to_intel(arg=None):
    response = confirm_gpu_switch(_("Intel (Power Saving)"))
    if response != Gtk.ResponseType.CANCEL:
        subprocess.call(["pkexec", "prime-select", "intel"])
        session_logout()

def switch_to_nvidia(arg=None):
    response = confirm_gpu_switch(_("NVIDIA (Performance Mode)"))
    if response != Gtk.ResponseType.CANCEL:
        subprocess.call(["pkexec", "prime-select", "nvidia"])
        session_logout()

def switch_to_ondemand(arg=None):
    response = confirm_gpu_switch(_("NVIDIA (On-Demand)"))
    if response != Gtk.ResponseType.CANCEL:
        subprocess.call(["pkexec", "prime-select", "on-demand"])
        session_logout()

class Indicator:
    def __init__(self):
        self.intel_available = check_capability('intel')
        self.nvidia_available = check_capability('nvidia')
        self.ondemand_available = check_capability('on-demand')
        self.active_gpu = get_active_gpu()

        if ('intel' in self.active_gpu):
            current_icon = "optimus-indicator-intel"
            current_gpu = _("Intel (Power Saving)")
        elif ('nvidia' in self.active_gpu):
            current_icon = "optimus-indicator-nvidia"
            current_gpu = _("NVIDIA (Performance Mode)")
        elif ('on-demand' in self.active_gpu):
            current_icon = "optimus-indicator-nvidia"
            current_gpu = _("NVIDIA (On-Demand)")
        else:
            self.icon.set_icon("optimus-indicator-unknown")
            current_gpu = _("Unknown")

        # If we can derive the OpenGL renderer use that for current_gpu
        visualinfo = subprocess.Popen('visualinfo', stdout=PIPE, stderr=STDOUT)
        for line in visualinfo.stdout.readlines():
            text = line.rstrip().decode('utf-8')
            if 'OpenGL renderer string:' in text:
                current_gpu = text.replace('OpenGL renderer string:','').strip()
                break

        menu = Gtk.Menu()

        self.icon = AppIndicator3.Indicator.new('mate-optimus', current_icon, AppIndicator3.IndicatorCategory.HARDWARE)
        self.icon.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

        self.icon.set_title(current_gpu)
        active = Gtk.MenuItem(label=current_gpu)
        active.set_sensitive(False)
        menu.append(active)

        menu.append(Gtk.SeparatorMenuItem())

        if self.intel_available:
            intel = Gtk.MenuItem(label=_("Switch to: ") + _("Intel (Power Saving)"))
            intel.connect("activate", switch_to_intel)
            if 'intel' in self.active_gpu:
                intel.set_sensitive(False)
            menu.append(intel)

        if self.nvidia_available:
            nvidia = Gtk.MenuItem(label=_("Switch to: ") + _("NVIDIA (Performance Mode)"))
            nvidia.connect("activate", switch_to_nvidia)
            if 'nvidia' in self.active_gpu:
                nvidia.set_sensitive(False)
            menu.append(nvidia)

        if self.ondemand_available:
            ondemand = Gtk.MenuItem(label=_("Switch to: ") + ("NVIDIA (On-Demand)"))
            ondemand.connect("activate", switch_to_ondemand)
            if 'on-demand' in self.active_gpu:
                ondemand.set_sensitive(False)
            menu.append(ondemand)

        menu.append(Gtk.SeparatorMenuItem())

        settings = Gtk.MenuItem(label=_("NVIDIA Settings"))
        settings.connect("activate", run_nvidia_settings)
        menu.append(settings)

        menu.append(Gtk.SeparatorMenuItem())

        quit_app = Gtk.MenuItem(label=_("Quit"))
        quit_app.connect("activate", self.terminate)
        menu.append(quit_app)
        self.icon.set_menu(menu)
        menu.show_all()

    def terminate(self, window = None, data = None):
        Gtk.main_quit()

if __name__ == "__main__":
    setproctitle.setproctitle('mate-optimus')

    # If NVIDIA Prime is not installed or isn't supported then exit.
    if not (os.path.exists("/usr/bin/nvidia-settings") and os.path.exists("/usr/bin/prime-select")):
        print('No nvidia-settings and prime-select detected.')
        sys.exit(0)

    process = subprocess.Popen(['prime-supported'], stdout=PIPE, stderr=DEVNULL)
    out, err = process.communicate()
    prime_supported = out.decode('utf-8')
    if 'yes' not in prime_supported:
        print('Prime not supported.')
        sys.exit(0)

    Indicator()
    Gtk.main()