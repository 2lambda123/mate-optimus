#!/usr/bin/env python3

import gettext
import gi
import os
import setproctitle
import subprocess
import sys
from subprocess import DEVNULL, PIPE

gi.require_version('Gdk', '3.0')
from gi.repository import Gdk

gi.require_version('Gtk', '3.0')
from gi.repository import Gtk

gi.require_version('Notify', '0.7')
from gi.repository import Notify

gi.require_version('AppIndicator3', '0.1')
from gi.repository import AppIndicator3

# i18n
gettext.install("mate-optimus", "/usr/share/locale")

def get_active_gpu():
    process = subprocess.Popen(['prime-select', 'query'], stdout=PIPE)
    out, err = process.communicate()
    return out.decode('utf-8')

def check_capability(capability):
    process = subprocess.Popen(['prime-select', '-h'], stdout=PIPE, stderr=PIPE)
    out, err = process.communicate()
    capabilities = err.decode('utf-8')
    if capability in capabilities:
        return True
    else:
        return False

def gpu_switch_notify(gpu):
    Notify.init(_('MATE Optimus'))
    notify=Notify.Notification.new (_('GPU Configuration Switched'),_('Log out and log back in to complete the enablement of the default GPU to ' + gpu), 'dialog-information')
    notify.show()

def run_nvidia_settings(arg=None):
    subprocess.Popen(["nvidia-settings", "-page", "PRIME Profiles"])

def switch_to_intel(arg=None):
    #subprocess.call(["pkexec", "prime-select", "intel"])
    gpu_switch_notify(_("Intel (Power Saving)"))

def switch_to_nvidia(arg=None):
    #subprocess.call(["pkexec", "prime-select", "nvidia"])
    gpu_switch_notify(_("NVIDIA (Performance Mode)"))

def switch_to_ondemand(arg=None):
    #subprocess.call(["pkexec", "prime-select", "on-demand"])
    gpu_switch_notify(_("NVIDIA (On-Demand)"))

class Indicator:
    def __init__(self):
        self.icon = AppIndicator3.Indicator.new('mate-optimus', '', AppIndicator3.IndicatorCategory.HARDWARE)
        self.icon.set_status(AppIndicator3.IndicatorStatus.ACTIVE)

        menu = Gtk.Menu()

        self.intel_available = check_capability('intel')
        self.nvidia_available = check_capability('nvidia')
        self.ondemand_available = check_capability('on-demand')
        self.active_gpu = get_active_gpu()

        if ('intel' in self.active_gpu):
            self.icon.set_icon("optimus-tray-intel-symbolic")
            self.icon_tooltip_text = _("Active graphics card: ") + _("Intel (Power Saving)")
        elif ('nvidia' in self.active_gpu):
            self.icon.set_icon("optimus-tray-nvidia-symbolic")
            self.icon_tooltip_text = _("Active graphics card: ") + _("NVIDIA (Performance Mode)")
        elif ('on-demand' in self.active_gpu):
            self.icon.set_icon("optimus-tray-nvidia-symbolic")
            self.icon_tooltip_text = _("Active graphics card: ") + _("NVIDIA (On-Demand)")
        else:
            self.icon.set_icon("optimus-tray-unknown-symbolic")
            self.icon_tooltip_text = _("Active graphics card: ") + _("Unknown")

        self.icon.set_title(self.icon_tooltip_text)

        active = Gtk.MenuItem(label=self.icon_tooltip_text)
        active.set_sensitive(False)
        menu.append(active)

        menu.append(Gtk.SeparatorMenuItem())

        if ('intel' not in self.active_gpu) and (self.intel_available):
            intel = Gtk.MenuItem(label=_("Switch to: ") + _("Intel (Power Saving)"))
            intel.connect("activate", switch_to_intel)
            menu.append(intel)

        if ('nvidia' not in self.active_gpu) and (self.nvidia_available):
            nvidia = Gtk.MenuItem(label=_("Switch to NVIDIA (Performance Mode)"))
            nvidia.connect("activate", switch_to_nvidia)
            menu.append(nvidia)

        if ('on-demand' not in self.active_gpu) and (self.ondemand_available):
            ondemand = Gtk.MenuItem(label=_("Switch to NVIDIA (On-Demand)"))
            ondemand.connect("activate", switch_to_ondemand)
            menu.append(ondemand)

        menu.append(Gtk.SeparatorMenuItem())

        settings = Gtk.MenuItem(label=_("NVIDIA Settings"))
        settings.connect("activate", run_nvidia_settings)
        menu.append(settings)

        menu.append(Gtk.SeparatorMenuItem())

        quit_app = Gtk.MenuItem(label=_("Quit"))
        quit_app.connect("activate", self.terminate)
        menu.append(quit_app)
        menu.show_all()
        self.icon.set_menu(menu)

    def terminate(self, window = None, data = None):
        Gtk.main_quit()

if __name__ == "__main__":
    setproctitle.setproctitle('mate-optimus')

    # If NVIDIA Prime is not installed or isn't supported then exit.
    if not (os.path.exists("/usr/bin/nvidia-settings") and os.path.exists("/usr/bin/prime-select")):
        print('No nvidia-settings and prime-select detected.')
        sys.exit(0)

    process = subprocess.Popen(['prime-supported'], stdout=PIPE, stderr=DEVNULL)
    out, err = process.communicate()
    prime_supported = out.decode('utf-8')
    if 'yes' not in prime_supported:
        print('Prime not supported.')
        sys.exit(0)

    Indicator()
    Gtk.main()